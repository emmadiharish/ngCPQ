/**
 * Directive: dynamicField
 * 
 */
;(function() {
	'use strict';

	angular.module('aptCPQUI').directive('dynamicField', dynamicFieldDirective);

	dynamicFieldDirective.$inject = ['systemConstants', '$sce'];

	dynamicFieldCtrl.$inject = ['$scope',
	                            '$log',
	                            '$filter',
	                            'systemConstants',
	                            'aptBase.UtilService',
	                            'ConfigurationDataService',
	                            'aptBase.i18nService'
	                            ];
	/**
	 * An input or read-only field directive. Editable value is bound to 
	 * 	the model property. The properties determine how the field is rendered
	 * 	and how it is edited. Note that the property names were chosen to match
	 * 	the column medatadata information generated by mainCartDirective:
	 * 		properties.FieldType 		Key for what kind of value to display and store.
	 * 									Defaults to string.
	 *		properties.IsEditable 		Whether to allow editing on the field.
	 *									Defaults to false.
	 * 		properties.IsDisabled 		Whether to to disable the editable field.
	 * 									Defaults to false.
	 * 		properties.TrueValue 		Key for what kind of value is equivalent to true
	 *									for a boolean type.
	 *									Defaults to "true"
	 * 		properties.FalseValue 		Key for what kind of value is equivalent to false
	 *									for a boolean type.
	 *									Defaults to "false"
	 * 		properties.picklistEntries	The picklist entry schema definition	 
	 * @return {object} directive object
	 */
	function dynamicFieldDirective(systemConstants, $sce) {
		var directive;
		directive = {
				restrict:'E',
				scope: {
					model: '=',
					fieldType: '@',  //override input field type
					isEditable: '@', //override is editable (same as read only)
					isDisabled: '@', //override disable input
					displayType:'@', //override display type
					trueValue:'@',	 //truthy value for display type checkbox
					falseValue:'@',	 //falsy value for display type checkbox
					properties: '=?',
				},
				templateUrl: systemConstants.baseUrl + '/templates/directives/fields/dynamic-include.html',
				controller: dynamicFieldCtrl,
				controllerAs: 'dynamicField',
				bindToController: true,
				link: function(scope) {
					scope.trustAsHtml = function(value) {
						return $sce.trustAsHtml(value);
					};			
				}
		};

		return directive;
	}

	function dynamicFieldCtrl($scope, $log, $filter, systemConstants, UtilService, ConfigurationDataService, i18nService) {
		var vm = this;
		var nsPrefix = systemConstants.nsPrefix;
		vm.labels = i18nService.CustomLabel;
		vm.getIsStringType = getIsStringType;
		
		init();

		/**
		 * Initialize defaults for the view model (vm), then execute additional
		 * 	init blocks depending on the field type which may override defaulting:
		 * 	- Get the template url for ng-include
		 * 	- Define which "applyChange" function to use for field validation
		 * @return {[type]} [description]
		 */
		function init() {
			vm.modelOptions = {
					getterSetter: true,
					updateOn: 'blur'
			};
			vm.getSetModel = getSetString;			
			//Determine whether to use element attributes or properties object
			if (!angular.isDefined(vm.properties)) {
				vm.properties = {};
			}
			//set field type
			vm.fieldType = vm.fieldType ? vm.fieldType : vm.properties.FieldType;			
			//setup the default display type
			vm.displayType = vm.displayType ? vm.displayType : vm.properties.DisplayType;
			vm.displayType =  vm.displayType ? String(vm.displayType).toLowerCase() : 'text';

			//Get the custom settings and init using them
			ConfigurationDataService.getCustomSettings().then(function (settings) {
				vm.systemProperties = settings.systemProperties;
				vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-dynamic.html';				
				//setup overridable properties
				initProperty('FieldType');
				initProperty('DisplayType');
				initProperty('IsCalculated', true, false);
				initProperty('IsDisabled', true, false);
				initProperty('IsEditable', true, true);			
				initProperty('TrueValue', false, 'true');
				initProperty('FalseValue', false, 'false');
								
				//setup getter/setters, templates, etc.
				initByFieldType(vm.fieldType);			
				//setup special watches for picklist type changes
				initpicklistWatch();		
			});
		}

		/**
		 * Establish which get/set functions to use based on what type of field
		 * the directive is to use. Supported field types:
		 *		'string'    	- 
		 *		'double'    	- 
		 *		'percent'   	- uses custom precision
		 *		'quantity'  	- uses custom precision
		 *		'currency'  	- uses custom precision & template
		 *		'date'      	- uses custom date template
		 *		'picklist'  	- uses custom child directive
		 *		'multipicklist' - uses custom child directive
		 *		'boolean'  		- uses custom template
		 */
		function initByFieldType(fieldType) {
			var fieldTypeInitMap = {
					"string": function () {
						vm.getSetModel = getSetString;

					},
					"textarea": function () {
						vm.getSetModel = getSetString;

					},
					"percent": function () {
						vm.getSetModel = getSetPercent;				

					},
					"date": function () {
						//Override default template to use one with date picker
						vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-date.html';
						vm.getSetModel = getSetDate;
						// vm.dateFormat = i18nService.dateFormat;

					},
					"boolean" : function() {
						//setup getter
						vm.getSetBoolean = getSetBoolean;
						//override display type
						vm.displayType = 'checkbox';
						//setup true/false values
						vm.trueValue = vm.trueValue ? vm.trueValue : vm.properties.TrueValue;
						vm.trueValue = vm.trueValue ? vm.trueValue : 'true';
						vm.falseValue = vm.falseValue ? vm.falseValue : 'false';
					},
					"double": function () {
						vm.getSetModel = getSetDouble;

					},
					"quantity": function () {
						vm.getSetModel = getSetQuantity;

					},
					"currency": function () {
						vm.getSetModel = getSetCurrency;

					},
					"picklist": function () {
						vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-picklist.html';					
						intitPickListType();					
					},
					"multipicklist": function () {
						vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-multi-picklist.html';					
						intitPickListType();
					}
			}

			fieldType = fieldType ? fieldType.toLowerCase() : 'string';
			var fieldTypeInitFn = fieldTypeInitMap[fieldType];
			if (fieldTypeInitFn === undefined) {
				$log.error('Unsupported Field Type:', fieldType);
				return;
			}
			fieldTypeInitFn.call(vm);
		}

		/**
		 * Initialize the overrideable properties for this display control.
		 * This method will attach a default getter/setter which will look
		 * for an attribute override and then a "property" value. Property object
		 * is built from the Schema Definition of a field.
		 * @param propertyName name of the property in proper case
		 * @param castResultToBool flag indicating whether to cast the property to
		 *						   a boolean
		 * @param undefinedValue default value when propertyName is not defined as
		 *						 either an override attribute or a schema property
		 */
		function initProperty(propertyName, castResultToBool, undefinedValue) {
			var camelCase = propertyName[0].toLowerCase() + propertyName.substring(1);			
			var getter = function() {
				var result;
				if(angular.isDefined(vm[camelCase])) {
					result = vm[camelCase];
				} else {
					result = vm.properties[propertyName];
				}

				if(angular.isUndefined(result)) {
					result = undefinedValue;
				}

				if(castResultToBool) {
					return String(result).toLowerCase() == "true"
				}

				return result;
			};

			var setter = function(val) {
				this[camelCase] = val;
			};

			//setup the property
			Object.defineProperty(vm, propertyName, { get: getter, set: setter });
		}

		/**
		 * Initialize the set/get functions, picklist entries and 
		 * "selected" model object
		 */
		function intitPickListType() {
			vm.getSetModel = getSetPickList;
			//setup selectable values
			if (!angular.isArray(vm.properties.pickListEntries)) {
				return;

			}					
			vm.entries = vm.properties.pickListEntries;			

			//set default value for model
			var modelVal = getModel();
			if (!angular.isDefined(modelVal)
					|| modelVal == null) {						
				getSetPickList(getPickListDefault());
			}

			//set "selected" object
			var modelVal = getSetPickList(); 
			vm.selected = !vm.IsEditable ? modelVal : modelVal.selected;
		}

		/**
		 * Initialize the watch espressions for a picklist
		 */
		function initpicklistWatch() {
			if(getIsPicklistType()) {
				//watch for model changes
				$scope.$watch(
						function() { return getModel(); },
						function(newValue, oldValue) {
							if(newValue != oldValue) {
								var modelVal = getSetPickList();
								if(modelVal && modelVal.selected) {
									if(angular.isUndefined(vm.selected)) {
										vm.selected = modelVal.selected;
									} else if(angular.isArray(vm.selected))  {
										vm.selected.length = 0;
										angular.extend(vm.selected, modelVal.selected);
									} else {
										vm.selected = modelVal.selected;
									}
								} else {
									vm.selected = undefined;
								}
							}
						}
				);
				// watch selected value
				$scope.$watch(
						function() { return vm.selected; },
						function(newValue, oldValue) {
							if(newValue != oldValue) {
								getSetPickList(angular.isDefined(newValue) ? newValue : null);
							}
						}
				);					
				//watch picklist entry changes
				$scope.$watch(
					function() { return vm.properties.pickListEntries; }, 
					function(newValue, oldValue) {
						if(newValue != oldValue) {
							initPicklistEntries(newValue, oldValue);
						}
					}, 
					true);					
			}
		}

		/**
		 * Initialize the picklist entries, updating
		 * the selection and the model accordingly
		 * @param newValue the new picklist entries.
		 */
		function initPicklistEntries(newValue) {			
			if(newValue) {
				// ui-select uses angular object to maintain picklist values; therefore
				// we expect the order and # of entries to stay fixed, and rely on 
				// entry properties to determin display
				if(angular.isDefined(vm.entries) 
						&& vm.entries != null
						&& getIsMultiPicklist()) { 
					for(var i=0, len = vm.entries.length; i < len; i++) {
						angular.extend(vm.entries[i], newValue[i]);
					}
				} else {
					vm.entries = newValue;
				}
			}

			if(angular.isDefined(vm.selected)
					&& vm.selected.length) {
				if(getIsMultiPicklist()) {
					var newValueMap = {};
					for(var i=0; i < newValue.length; i++) {
						var entry = newValue[i];
						if(!entry.disable) {
							newValueMap[entry.value] = i;
						}								
					}

					var newSelectedValues = [];
					var selectedMap = {};
					var selectionChanged = false;
					for(var i=0; i < vm.selected.length; i++) {								
						var newValIdx = newValueMap[vm.selected[i]];
						if(angular.isDefined(newValIdx)) {							
							newSelectedValues.push(vm.selected[i]);
							selectedMap[vm.selected[i]] = i;
						} else {
							selectionChanged = true;
						}
					}

					if(selectionChanged) { //some values are no longer allowable
						vm.selected.length = 0; 
						for(var i = 0, ii = newSelectedValues.length; i < ii; i++) {
							vm.selected.push(newSelectedValues[i]);
						}

						getSetPickList(vm.selected);
					}
				} else {
					var foundMatch = false;
					for(var i=0; i < newValue.length; i++) {
						if(newValue[i].value == vm.selected) {
							foundMatch = true;
							break;
						}
					}

					if(!foundMatch) {
						vm.selected = undefined;
						getSetPickList(vm.selected);
					}
				}
			}
		}

		/**
		 * Check if this control is a string type
		 * @return true if this is either a string type false otherwise
		 */
		function getIsStringType() {
			return vm.FieldType.toLowerCase() == 'string';

		}

		/**
		 * Check if this control is a picklist or multi-picklist type
		 * @return true if this is either a picklist 
		 		   or multi-picklist type, false otherwise
		 */
		function getIsPicklistType() {
			return getIsMultiPicklist() || getIsPicklist();

		}

		/**
		 * Check if this control is a picklist type
		 * @return true if picklist type, false otherwise
		 */
		function getIsPicklist() {
			if (angular.isDefined(vm.FieldType)) {
				return vm.FieldType.toLowerCase() == 'picklist';

			}

			return false;
		}

		/**
		 * Check if this control is a multi-picklist type
		 * @return true if multi-picklist type, false otherwise
		 */
		function getIsMultiPicklist() {
			if (angular.isDefined(vm.FieldType)) {
				return vm.FieldType.toLowerCase() == 'multipicklist';

			}

			return false;
		}

		/**
		 * Get the default value from the picklist entries
		 * @return the default value selection as a string
		 */
		function getPickListDefault() {
			var nextPick, 
			defaultValues = [];
			for (var pickIndex = vm.entries.length - 1; pickIndex >= 0; pickIndex--) {
				nextPick = vm.entries[pickIndex];
				if (nextPick.defaultValue) {
					defaultValues.push(nextPick.value);
				}
			}

			return defaultValues.length ? defaultValues.join(';') : null;
		}

		/**
		 * Get the model value 
		 * @return the model value
		 */
		function getModel() {
			if (angular.isFunction(vm.model)) {
				return vm.model();

			} else {
				return vm.model;

			}

		}

		/**
		 * Set the model value 
		 * @param newVal the new value
		 * @return the current model value
		 */
		function setModel(newVal) {
			if (angular.isFunction(vm.model)) {
				return vm.model(newVal);

			} else {
				vm.model = newVal;
				return vm.model;

			}
		}

		/**
		 * Get/Set model as a string
		 * @param inputStr the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetString(inputStr) {
			if (angular.isDefined(inputStr)) {
				var strVal = inputStr === null ? '' : String(inputStr);
				setModel(inputStr);

			}
			return getModel();

		}

		/**
		 * Get/Set model as a boolean
		 * @param boolVal the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetBoolean(boolVal) {
			if(angular.isDefined(boolVal)) {
				var modelVal = (trueValue() === boolVal)
							 ? true 
							 : ((falseValue() === boolVal) ? false : null);
				setModel(modelVal);
			}

			return getModel();
		}

		/**
		 * Get/Set model as a percentage
		 * @param inputStr the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetPercent(inputStr) {
			var precision = vm.systemProperties.PercentageFieldPrecision;
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					setModel(null);

				} else {
					inputStr = inputStr.replace('%', '');
					var inputAsNum = UtilService.round(inputStr, precision);
					if (angular.isNumber(inputAsNum)) {
						setModel(inputAsNum);

					}

				}

			}
			var modelVal = getModel();
			return angular.isNumber(modelVal) ? modelVal.toFixed(precision) + '%' : '';

		}

		/**
		 * Get/Set model as a quantity
		 * @param inputStr the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetQuantity(inputStr) {
			var precision = vm.systemProperties.QuantityFieldPrecision;
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					setModel(null);

				} else {
					var inputAsNum = UtilService.round(inputStr, precision);
					if (angular.isNumber(inputAsNum)) {
						setModel(inputAsNum);

					}

				}

			}
			var modelVal = getModel();
			return angular.isNumber(modelVal) ? modelVal.toFixed(precision) : '';

		}

		/**
		 * Get/Set model as a a double
		 * @param inputStr the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetDouble(inputStr) {
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					setModel(null);

				} else {
					var inputAsNum = Number(inputStr);
					if (!isNaN(inputAsNum)) {
						setModel(inputAsNum);

					}

				}

			}
			var modelVal = getModel();
			return angular.isNumber(modelVal) ? modelVal : null;

		}

		/**
		 * Get/Set model as a currency
		 * @param inputStr the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetCurrency(inputStr) {
			//If change
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					udpateModel(null);

				} else {
					setModel($filter('aptCurrencyToNumber')(inputStr));

				}

			}
			return $filter('aptNumberToCurrency')(getModel());

		}

		/**
		 * Get/Set model as a date
		 * @param dateVal the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetDate(dateVal) {
			var enteredDate;
			if (angular.isDefined(dateVal)) {
				if (dateVal === null || dateVal === '') {
					enteredDate = null;
					setModel(null); 

				} else {
					enteredDate = new Date(dateVal);
					//strip off time part
					var justDate = new Date(Date.parse(enteredDate.getFullYear() + '/' + (enteredDate.getMonth() + 1) + '/' + enteredDate.getDate() + ' GMT'));
					setModel(justDate.getTime()); 

				}

				// since the field is converted to string
				if (angular.isString(dateVal) && vm.tempDate) {
					vm.tempDate.setDate(enteredDate);

				}

			}
			var modelVal = getModel();
			return modelVal ? $filter('aptDate')(modelVal) : null;

		}

		/**
		 * Get/Set model as a picklist or multi-picklist
		 * @param newValue the new value, undefined will be ignored
		 * @return the current model value
		 */
		function getSetPickList(newValue) {
			if(!vm.IsEditable) { //if cannot edit return model value
				return getModel();

			}

			var modelVal = null;
			if(angular.isDefined(newValue)) {
				var selectedValues = [];
				if(angular.isArray(newValue)) {
					if(newValue.length) {
						for(var i=0, max=newValue.length; i < max; i++) {
							selectedValues.push(newValue[i]);							
						}

						modelVal = selectedValues.join(';');
					}
				} else if(newValue != null) {
					modelVal = newValue;
				}

				setModel(modelVal, getIsMultiPicklist());				
			}

			modelVal = getModel();

			var displayModel = {};
			if(angular.isDefined(modelVal)
					&& modelVal != null) {
				if(getIsMultiPicklist()) {
					if(modelVal.length) {
						displayModel.selected = modelVal.split(';');
					}
				} else {
					if(modelVal.length) {
						displayModel.selected = modelVal;
					}
				}
			}

			return displayModel;
		}
	}
}).call(this);