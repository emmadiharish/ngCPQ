(function() {
	angular.module('aptCPQUI')
		.directive('dynamicField', dynamicFieldDirective);

	dynamicFieldDirective.$inject = ['systemConstants'];

	dynamicFieldCtrl.$inject = [
		'$log',
		'$filter',
		'systemConstants',
		'aptBase.UtilService',
		'ConfigurationDataService',
		 'aptBase.i18nService'
	];

	/**
	 * An input or read-only field directive. Editable value is bound to 
	 * 	the model property. The properties determine how the field is rendered
	 * 	and how it is edited. Note that the property names were chosen to match
	 * 	the column medatadata information generated by mainCartDirective:
	 * 		properties.FieldType 			Key for what kind of value to display and store.
	 * 															Defaults to string.
	 *		properties.IsEditable 		Whether to allow editing on the field.
	 *															Defaults to false.
	 * @return {object} directive object
	 */
	function dynamicFieldDirective(systemConstants) {
		var directive;
		directive = {
			restrict:'E',
			scope: {
				model: '=',
				properties: '='
			},
			templateUrl: systemConstants.baseUrl + '/templates/directives/fields/dynamic-include.html',
			controller: dynamicFieldCtrl,
			controllerAs: 'dynamicField',
			bindToController: true
		};
		return directive;
	
	}

	function dynamicFieldCtrl($log, $filter, systemConstants, UtilService, ConfigurationDataService, i18nService) {
		var vm = this;
		var nsPrefix = systemConstants.nsPrefix;
		vm.labels= i18nService.CustomLabel;
		//vm.getTemplateUrl = getTemplateUrl;
		init();

		/**
		 * Initialize defaults for the view model (vm), then execute additional
		 * 	init blocks depending on the field type which may override defaulting:
		 * 	- Get the template url for ng-include
		 * 	- Define which "applyChange" function to use for field validation
		 * @return {[type]} [description]
		 */
		function init() {
			vm.modelOptions = {
				getterSetter: true,
				updateOn: 'blur'
			};
			vm.getSetModel = getSetString;
			if (vm.properties) {
				vm.isEditable = vm.properties.IsEditable ? true : false;
				vm.fieldType = vm.properties.FieldType ? String(vm.properties.FieldType).toLowerCase() : 'string';
				
			}
			ConfigurationDataService.getCustomSettings().then(function (settings) {
				vm.systemProperties = settings.systemProperties;
				vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-dynamic.html';
				initByFieldType(vm.fieldType);
			});

		}

		/**
		 * Establish which get/set functions to use based on what type of field
		 * 	the directive is to use. Supported field types:
		 *		'string'    - 
		 *		'double'    - 
		 *		'percent'   - uses custom precision
		 *		'quantity'  - uses custom precision
		 *		'currency'  - uses custom precision & template
		 *		'date'      - uses custom date template
		 *		'picklist'  - 
		 */
		function initByFieldType(fieldType) {
			fieldType = fieldType ? fieldType.toLowerCase() : 'string';
			var fieldTypeInitMap = {
				"string": function () {
					vm.getSetModel = getSetString;
	
				},
				"textarea": function () {
					vm.getSetModel = getSetString;
	
				},
				"percent": function () {
					vm.getSetModel = getSetPercent;				
	
				},
				"date": function () {
					//Override default template to use one with date picker
					vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-date.html';
					vm.getSetModel = getSetDate;
					// vm.dateFormat = i18nService.dateFormat;
	
				},
				"double": function () {
					vm.getSetModel = getSetDouble;
	
				},
				"quantity": function () {
					vm.getSetModel = getSetQuantity;
	
				},
				"currency": function () {
					vm.getSetModel = getSetCurrency;
	
				},
				"picklist": function () {
					vm.getSetModel = getSetString;
					vm.templateUrl = systemConstants.baseUrl + '/templates/directives/fields/field-picklist.html';
					if (!angular.isArray(vm.properties.picklistEntries)) {
						return;

					}
					var entries = vm.properties.picklistEntries;
					var nextPick, 
						defulatValue = '',
						hasNone = false;
					for (var pickIndex = entries.length - 1; pickIndex >= 0; pickIndex--) {
						nextPick = entries[pickIndex];
						if (nextPick.defaultValue) {
							defulatValue = nextPick.value; 

						}

					}
					if (!angular.isDefined(vm.model)) {
						vm.getSetModel(defaultValue);

					}

				}

			};
			var fieldTypeInitFn = fieldTypeInitMap[fieldType];
			if (fieldTypeInitFn === undefined) {
				$log.log('Unsuported fieldType', fieldType);
				return;
			}
			fieldTypeInitFn.call(vm);

		}

		function getSetString(inputStr) {
			if (angular.isDefined(inputStr)) {
				vm.model = inputStr === null ? '' : String(inputStr);
				
			}
			return vm.model;

		}

		function getSetPercent(inputStr) {
			var precision = vm.systemProperties.PercentageFieldPrecision;
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					vm.model = null;

				} else {
					inputStr = inputStr.replace('%', '');
					var inputAsNum = UtilService.round(inputStr, precision);
					if (angular.isNumber(inputAsNum)) {
						vm.model = inputAsNum;
						
					}
					
				}

			}
			return angular.isNumber(vm.model) ? vm.model.toFixed(precision) + '%' : '';

		}

		function getSetQuantity(inputStr) {
			var precision = vm.systemProperties.QuantityFieldPrecision;
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					vm.model = null;

				} else {
					var inputAsNum = UtilService.round(inputStr, precision);
					if (angular.isNumber(inputAsNum)) {
						vm.model = inputAsNum;
						
					}

				}

			}
			return angular.isNumber(vm.model) ? vm.model.toFixed(precision) : '';

		}

		function getSetDouble(inputStr) {
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					vm.model = null;

				} else {
					var inputAsNum = Number(inputStr);
					if (!isNaN(inputAsNum)) {
						vm.model = inputAsNum;
						
					}

				}
				
			}
			return vm.model ? Number(vm.model) : null;

		}

		function getSetCurrency(inputStr) {
			//If change
			if (angular.isDefined(inputStr)) {
				if (inputStr === null || inputStr === '') {
					vm.model = null;

				} else {
					vm.model = $filter('aptCurrencyToNumber')(inputStr);

				}

			}
			// return i18nService.CurrencyFilter.numberToCurrency(vm.model, vm.systemProperties.CurrencyFieldPrecision);
			return $filter('aptNumberToCurrency')(vm.model);

		}

		function getSetDate(dateVal) {
			var enteredDate;
			if (angular.isDefined(dateVal)) {
				if (dateVal === null || dateVal === '') {
					enteredDate = null;
					vm.model = null; 
				} else {
					enteredDate = new Date(dateVal);
					//strip off time part
					var justDate = new Date(Date.parse(enteredDate.getFullYear() + '/' + (enteredDate.getMonth() + 1) + '/' + enteredDate.getDate() + ' GMT'));
					vm.model = justDate.getTime(); 
				}
				
				// since the field is converted to string
				if (angular.isString(dateVal) && vm.tempDate) {
					vm.tempDate.setDate(enteredDate);
				}

			}
			// return vm.model ? i18nService.DateFilter.dateToString(vm.model) : null;
			return vm.model ? $filter('aptDate')(vm.model) : null;
			
		}

	}

}).call(this);